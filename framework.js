'use strict';

let N = 3
let char = []
function makeRelations(N) {  
  let edges = [], i = 0
  function link(i,j,u) {
    if (!edges[i]) edges[i] = []
    edges[i][j] = u
  }

  char = [...'abcdefghjklmnopqrstuvwxyz'.toUpperCase()]
  let j = 0
  while (i < N) {
    let roll = Math.random(),
        rel = roll < .2 ? 'notion' :
              roll < .5 ? 'place' :
              roll < .8 ? 'thing' :
              'friend'
    
    if (rel == 'friend') {
      link(i, i+1, rel) // link to next person
      link(i+1, i, rel) // relationships are mutual
      char[i] = makeThing(desc_clothing, '#title#')
      ++i // advance pointer
    }
    else if (rel == 'thing') {
      let k = N + Math.floor(Math.random()*j)
      link(i, k, rel) // link to any non-person
      if (k == N+j) {
        char[k] = char[k].length > 1 ? char[k] :
                  makeThing({'name': ["Foo", "Bar"]}, '#name#')
        ++j // move pointer off the end
      }
    }
  }
  console.log(char.join('\n'))
  return edges
}
function makeThing(rules, origin) {
  let grammar = tracery.createGrammar(rules);
  grammar.clearState();
  return grammar.flatten(origin);
}

let edgeList = (edges) =>
  edges.reduce((U, u, i) => {
    u.forEach((v,j) => {if (v) U.push({'name': `${i},${j}`, 'tags': [v]})}); return U
  }, [])

function select(kind) { // IMPLICIT STATE
  return new Rel(edgeList(relations)).select(kind)
}

let choose = (...args) => {
  if (args.length == 0) throw 'cannot choose from empty list'
  return args[Math.floor(Math.random() * args.length)]
}
// adapted for indexing from https://stackoverflow.com/a/4974690
let format = function (s, ...args) {
  var i = 0
  let get = (j) => typeof args[j] != 'undefined' ? args[j] : ''
  
  return s.replace(/{[0-9]*}/g, function (u) {
    let j = u.slice(1,-1),
        ret = get(j)
    if (!ret) {ret = get(i); ++i}
    return ret
  })
}

function weave(edges, constraints, eventer) {
  
  function link(i,j,u) {
    if (!edges[i]) edges[i] = []
    edges[i][j] = u
    return select('#'+i+','+j)
  }
  let ret = [],
      focus = constraints.protagonist,
      reserved = new Set([focus]),
      edge = edges.length
  
  constraints.goals.forEach((c) => {
    console.debug(c)
    if (!c.event) return // swallow nesting 'events'

    let e = c.event    
    console.log(e[0])

    let bindings = e.map((u,i) => {
      if (i==0) return [focus]
      console.log('\t' + e[i])
      
      let path = e[i].split('.'),
          head = focus

      // resolve a path (in the social graph)
      let res = path.reduce((tail, verb) => {
        let board = select(verb).select('#'+head)
        
        console.log('\t\t' + board.body[0])
        let pick = board.isEmpty() ? link(head, edge, verb) :
                                    board.drop(reserved).pickOne()
        
        let res = board.isEmpty() ? edge++ :
                                    pick.body[0].name.split(',')[1]
        head = res
        tail.push(parseInt(res))
        return tail
      }, []) // defines res, the sequence of nodes matching path
      return res
    }) // defines bindings
    let bound = bindings.reduce((U,u) => U.concat(u))

    // FIXME: discourage cast recycling.
    //        should suffice to do this locally during path resolution.
    if (bound.length > 1) {
      console.debug('banning ' + bound.slice(1).map(i => char[i]))
      bound.slice(1).forEach(i => reserved.add(i))
    }
    console.debug(reserved)

    // TRIGGER expansion
    // let exp = eventer[e[0]],
    //     str = exp.length != 0 ? choose(...exp) : e[0] + ' {} {}'.repeat(e.length-1),
    //     expansion = format(str, ...bound.map(i => char[i]))

    let cast = bound.map((i,j) => char[i]),
                // {let ret = {}; ret[char[j]] = char[i]; return ret}
        grammar = tracery.createGrammar({...eventer[e[0]], ...cast});
    grammar.clearState();
    let expansion = grammar.flatten("#origin#");
    
    ret.push(expansion)
  })
  
  return ret
}

function displayResults(element_id, eventer) {
      var container = document.getElementById(element_id);
      let constraints = generatePlot(N)

      // console.log(constraints.goals)
      // console.log(relations)
      let responses = weave(relations, constraints, eventer)
                      .map((u) => '<li>' + u + '</li>')
                      .reverse().join('\n')
      // TODO: expect relations to be mutated (stepped back in time).

      /* var responses = "<ul>";
      for(var i = 0; i < 15; i++) {
                         responses += "<li>";
                         responses += testGrammar(input_grammar)["message"];
                         responses += "</li>"
                         }
      responses += "</ul>"; */
    container.innerHTML = '<ul>' + responses + '</ul>';
    // console.log(relations)
}

/* function testGrammar(grammar_rules, context) {
    console.debug(grammar_rules);
    let grammar = tracery.createGrammar(grammar_rules);
    //grammar.addModifiers(baseEngModifiers);
    grammar.clearState();
    let message = grammar.flatten("#origin#");
    return {"message": message, "context": grammar};
} */

function testGrammar_displayResults(input_grammar, element_id) {
      var container = document.getElementById(element_id);
      var responses = "<ul>";
      for(var i = 0; i < 15; i++) {
                         responses += "<li>";
                         responses += testGrammar(input_grammar)["message"];
                         responses += "</li>"
                         }
      responses += "</ul>";
    container.innerHTML = responses;
    console.log(responses);
}
    

var desc_clothing ={
  "myStory": [
    "[setTitle:#title#][setPronouns:#pronoun#]#intro# #physicaldesc#."
  ],
  "intro":[
    "My name is #name#. I am known as #title#.",
    "Some call me #title#, but you may call me #name#.",
    "Fear not! #title#, also known as #name# is here!",
    "This one is #name#. I am also called #title#.",
    "My legend proceeds me even here! I am #title#, named #name#.",
    "I doubt you have heard of me. I am #name#, sometimes called #title#.",
  ],
//Stopped for 11/30. Removed Indian family names for current
  "maleCountry":[
    "[country:China][name:#chineseFamilyName# #chineseMaleName#]", 
    "[country:Persia][name:#persianFamilyName# #persianMaleName#]",
    "[country:Byzantine][name:#byzantineMaleName# #byzantineFamilyName#]",
    "[country:Arabic][name:#arabicMaleSet#]",
    //According to SCA website, no real deleniation between male/female, so this should just work
    "[country:Mongolia][name:#mongolianName#]",
    "[country:India][name:#indianMaleName#]",
   // "[country:Iran][name:#iranianFamilyName# #iranianGivenName#]"

  ],

  "femaleCountry":[
    "[country:China][name:#chineseFamilyName# #chineseFemaleName#]", 
    "[country:Persia][name:#persianFamilyName# #persianFemaleName#]",
    "[country:Byzantine][name:#byzantineFemaleName# #byzantineFamilyName#]",
    "[country:Arabic][name:#arabicFemaleSet#]",
    "[country:Mongolia][name:#mongolianName#]",
    "[country:India][name:#indianFemaleName#]"
  ],

  "gnCountry":[
    "[country:China][name:#chineseFamilyName# #chineseGivenName#]", 
    "[country:Persia][name:#persianFamilyName# #persianGivenName#]",
    "[country:Byzantine][name:#byzantineGivenName# #byzantineFamilyName#]",
    "[country:Arabic][name:#arabicGivenName#]",
    "[country:Mongolia][name:#mongolianName#]",
    "[country:India][name:#indianGivenName#]"
  ],

  "chineseGivenName":[
    "#chineseMaleName#"
  ],

  "persianGivenName":[
    "#persianMaleName#",
    "#persianFemaleName#"
  ],

  "byzantineGivenName":[
    "#byzantineMaleName#",
    "#byzantineFemaleName#"
  ],

  "indianGivenName":[
    "#indianMaleName#",
    "#indianFemaleName#"
  ],

  "arabicGivenName":[
  //"ibm" is son of, "bint" is daughter of
  //According to the SCA website I drew these from, there is not really a historic practice of
  //including the name of the mother. I'd like to include that since we not cleaving to pure history.
    "#arabicMaleName# ibn #arabicFemaleName#",
    "#arabicMaleName# ibn #arabicMaleName#",
    "#arabicFemaleName# bint #arabicFemaleName#",
    "#arabicFemaleName# bint #arabicMaleName#"
  ],

  "arabicMaleSet":[
    "#arabicMaleName# ibn #arabicFemaleName#",
    "#arabicMaleName# ibn #arabicMaleName#"
  ],

  "arabicFemaleSet":[
    "#arabicFemaleName# bint #arabicFemaleName#",
    "#arabicFemaleName# bint #arabicMaleName#"

  ],

  "title":[
    "#title1# #title2#"
  ],
  "title1":[
    "Jade",
    "Timely",
    "Black",
    "Heavenly",
    "Great",
    "Resourceful",
    "Dragon",
    "Fiery",
    "Double",
    "Little",
    "Striking",
    "Lord",
    "Flowery",
    "General",
    "Featherless",
    "Blue",
    "Gold",
    "Impatient",
    "Magic",
    "Red Haired",
    "Winged",
    "River",
    "Prodigal",
    "Resourceful",
    "Guardian",
    "Ugly",
    "Sacred",
    "Multicolored",
    "Divine",
    "Lonely",
    "Iron",
    "White Flower",
    "Fair Skinned",
    "Giant",
    "Demon",
    "Faceless",
    "Flea",
    "Goddess",
    "Golden Haired",
    "Black Haired"
  ],

  "title2":[
    "Rain",
    "Star",
    "Cloud",
    "Blade",
    "Head",
    "Thunderbolt",
    "Whirlwind",
    "Hawk",
    "Beautiful Beard",
    "Monk",
    "Arrow",
    "Beast",
    "Lancer",
    "Dervish",
    "Vanguard",
    "Traveller",
    "Devil",
    "Tiger",
    "Dragon",
    "Brother",
    "Wanderer",
    "Strategist",
    "Consort",
    "Vision",
    "Holy Fire",
    "Scholar",
    "Clerk",
    "Mathematician",
    "Physician",
    "Count",
    "Sage",
    "Crafter",
    "Musician",
    "Deity",
    "Ape",
    "Turtle",
    "Fan",
    "Whistle",
    "Demon",
    "Lightning",
    "Road",
    "Hound",
    "Ox",
    "Lily",
    "Child",
    "Sibling",
    "Deva",
    "Dijin",
    "Hare",
    "Snake"

  ],
  "physicaldesc": [
    "I #look.ed# to be #quality#, and was wearing #clothingadj.a# #setTorsoClothing#",
    "I had #quality.a# look in my eye. I was wearing #clothingadj.a# #setTorsoClothing#"
  ],

  "look":[
    "look",
    "seem",
    "appear"
  ],
  "pronoun": [
    "[pronounThey:he][pronounTheir:his][setTorsoClothing:#heTorsoClothing#][setCountry:#maleCountry#]",
    "[pronounThey:she][pronounTheir:her][setTorsoClothing:#sheTorsoClothing#][setCountry:#femaleCountry#]",
    "[pronounThey:they][pronounTheir:their][setTorsoClothing:#theyTorsoClothing#][setCountry:#gnCountry#]"
  ],
  "quality": [
    "worn-out",
    "brave","willing","determined",
    "unwilling","reluctant",
    "rational","logical",
    "obedient",
    "caring","healing",
    "dynamic","changeable","mercurial","unpredictable",
    "weak","craven","fearful",
    "opinionated","cranky","resolute",
    "educating","guiding","helpful",
    "mystical","mysterious",
    "expositional","revealing",
    "confusing","egocentric","misleading","clever","manipulative",
    "thoughtless","silly","amusing",
    "innocent","naive","simple","straightforward","credulous","endearing",
    "reflecting",
    "quiet","secretive",
    "curious",
    "dedicated","driven",
    "fair","unbiased","patient",
    "thorough","crafty",
    "final","morbid","dark",
    "giving","generous","charitable","patronizing",
    "incredible",
    "wishful","ambitious",
    "dominating","demanding","angry","egocentric","dedicated",
    "alluring","deceitful"

  ],
  "clothingadj": [
    "torn", 
    "well-made",
    "luxurious",
    "simple",
    "ornarte",
    "elegant", 
    "linen", 
    "hemp", 
    "wool", 
    "silk",
    "fur",
    "brocade",
    "cotton",
    "quilted",
    "felt",
    "camel's hair",
    "lambskin",
    "velvet",
    "leather",
    "satin",
    "cashmere",
    "cloth",
    "gauze",
    "hemp",
    "khādī",
    "muslin"

  ],
  "heTorsoClothing": [
    "shirt",
    "doublet",
    "robe",
    "cioppa",
    "hanfu pao",
    "shenyi",
    "jeliqa",
    "vest",
    "waistcoat",
    "jobba",
    "kaftan",
    "kel'at",
    "coat",
    "jacket",
    "pustin",
    "reda",
    "arakqloq",
    "qamis",
    "xuandan",
    "yuanlingshan",
    "lanshan"
  ],
  "sheTorsoClothing": [
    "blouse",
    "gown",
    "long gown",
    "chemise",
    "cotehardie",
    "houppelande",
    "overgown",
    "hanfu qun",
    "pien fu",
    "sheni",
    "cador"
  ],
  "theyTorsoClothing": [
    "#heTorsoClothing#",
    "#sheTorsoClothing#"
  ],

//Given names here
  //Taken from http://heraldry.sca.org/names/arabic-naming2.htm
  "arabicMaleName":[
    "Aban",
    "Abbad",
    "‘Abd al-Rahman",
    "‘Abd Allah",
    "‘Abd al-Aziz",
    "‘Abd al-Hamid",
    "‘Abd al-Malik",
    "‘Abd al-Zahir",
    "‘Abdus",
    "Ahmad",
    "‘Ali",
    "‘Allan",
    "‘Alqamah",
    "‘Ammar",
    "‘Amr",
    "Anas",
    "‘Aqil",
    "‘Arubah",
    "‘Asim",
    "‘Ata’",
    "Ayyub",
    "Babak",
    "Bakkar",
    "Bakr",
    "Bashshar",
    "Baybars",
    "Bilal",
    "Bishr",
    "Bundar",
    "Da’ud",
    "Dabbah",
    "Daffafah",
    "Dahhak",
    "Damdam",
    "Dirar",
    "Durayd",
    "Fadl",
    "Farras",
    "Fudayl",
    "Ghalib",
    "Ghassan",
    "Habib",
    "Hakam",
    "Hakim",
    "Hamdan",
    "Hamdun",
    "Hamid",
    "Hammad",
    "Hamzah",
    "Harb",
    "Harthamah",
    "Harun",
    "Hasan",
    "Hashim",
    "Hassan",
    "Hilal",
    "Hisham",
    "Hujr",
    "Humayd",
    "Hunayn",
    "Husayn",
    "Ibrahim ",
    "Idris",
    "‘Imran",
    "‘Isa ",
    "Ishaq",
    "Isma’il",
    "Iyas",
    "Jabir",
    "Ja’far",
    "Jahm",
    "Jibril",
    "Kamil",
    "Khalaf",
    "Khalid",
    "Khalil",
    "Khattab",
    "Khuzaymah",
    "Labid",
    "Lu’lu’",
    "Ma’bad",
    "Mahmud",
    "Malik",
    "Ma’n",
    "Mansur",
    "Ma’qil",
    "Marwan",
    "Maslamah",
    "Maymun",
    "Mikha’il",
    "Mishal",
    "Mu’adh",
    "Mu’ammar",
    "Mu’awiyah",
    "Mughirah",
    "Muhammad",
    "Mujahid",
    "Munqidh",
    "Muqatil",
    "Musa",
    "Muslim",
    "Muzahim",
    "Nafi’",
    "Najdah",
    "Nasr",
    "Nuh",
    "Nusayr",
    "Qatadah",
    "Qays",
    "Qudamah",
    "Qurrah",
    "Qutaybah",
    "Rabi’a",
    "Rafi’",
    "Ramadan",
    "Rashid",
    "Rawh",
    "Razin",
    "Ru’bah",
    "Sabur",
    "Sa’d",
    "Sa’dan	Sadaqah",
    "Sa’id",
    "Safwan",
    "Sahl",
    "Salamah",
    "Salih",
    "Salim",
    "Salm",
    "Sandi",
    "Sawwar",
    "Sayf",
    "Shabib",
    "Shahib",
    "Shahid",
    "Shahin",
    "Shaybah",
    "Shihab",
    "Shu’ayb",
    "Shuqayr",
    "Sinan",
    "Sufyan",
    "Sulaym",
    "Sulayman",
    "Surayj",
    "Tahir",
    "Talhah",
    "Talib",
    "Tamman",
    "Tawbah",
    "Tha’lab",
    "Thabit",
    "Thawabah",
    "Thawr",
    "‘Ubayd",
    "‘Ubayd Allah",
    "‘Umar",
    "‘Umarah",
    "Umayyah",
    "‘Unaynah",
    "‘Uqbah",
    "‘Urwah",
    "Usama ",
    "‘Utbah",
    "‘Uthman",
    "Wada’",
    "Wahb",
    "Wasil",
    "Ya’qub",
    "Yahya",
    "Yamin",
    "Yazid",
    "Yuhanna",
    "Yunus",
    "Yusuf",
    "Zakariya’",
    "Zayd",
    "Ziyad",
    "Zubayr",
    "Zuhayr"
  ],
  "arabicFemaleName":[
    "Abbasah",
    "Abdah",
    "`Abla",
    "`Afra",
    "`A`isha",
    "Amimah",
    "Aminah",
    "‘Amra",
    "Arwa",
    "Asiya",
    "Asma'",
    "`Atikah",
    "Azizah",
    "`Azzah",
    "Banah",
    "Banujah",
    "Baraka",
    "Bilqis",
    "Buran",
    "Bushra",
    "Buthaynah",
    "Chiklah",
    "Dahah",
    "Dananir",
    "Duqaq",
    "Durra",
    "Fadl",
    "Fatimah",
    "Fawz",
    "Fazila",
    "Ghadir",
    "Ghaniyah",
    "Ghaythah",
    "Hababah",
    "Hafsah",
    "Hakeema",
    "Hala",
    "Halima",
    "Hamama",
    "Hasanah",
    "Hawwa",
    "Hind",
    "Hullah Huma'i",
    "Husn",
    "`Ijliyah",
    "`Ilm",
    "`Inan",
    "Itimad",
    "‘Izza",
    "Jaida",
    "Jamila",
    "Jumana",
    "Juml",
    "Juwayriyyah",
    "Kasif",
    "Khadijah",
    "Khadija",
    "Khaizuran",
    "Khalida",
    "Khayra",
    "Layla",
    "Laila",
    "Lubaba",
    "Lubna",
    "Labna",
    "Mahabba",
    "Malak",
    "Manhalah",
    "Marajil",
    "Maridah",
    "Mariyah",
    "Maryam",
    "Mariam",
    "Maymuna",
    "Maynmunah",
    "Maimuna",
    "Maimunah",
    "Maysun",
    "Mayy",
    "Muhayya",
    "Munisa",
    "Munya",
    "Muti’a",
    "Nafisa",
    "Naila",
    "Nalkah",
    "Nu'm",
    "Nusayba",
    "Nuwwar",
    "Qabul",
    "Qaribah",
    "Rabab",
    "Rabi'ah",
    "Rabia",
    "Rahil",
    "Rahmat",
    "Ramlah",
    "Rayhana",
    "Raym",
    "Rayya",
    "Rudaba",
    "Raziya",
    "Ruqayyah",
    "Ruqayya",
    "Rusa",
    "Rusha",
    "Sabiha",
    "Saduf",
    "Safiya",
    "Safia",
    "Safwah",
    "Saham",
    "Sahla",
    "Sajah",
    "Sakan",
    "Salamah",
    "Salama",
    "Salma",
    "Salmaa",
    "Salsal",
    "Sanaa",
    "Sara",
    "Sawda",
    "Shaima",
    "Shifa",
    "Shiklah",
    "Su'ad",
    "Suad",
    "Subh",
    "Sumayya",
    "Sumnah",
    "Thana'",
    "`Ulayyah",
    "Ulaiyah",
    "Umamah",
    "Umayma",
    "`Utbah",
    "Wahshiyah",
    "Wallada",
    "Warwar",
    "Zaynab",
    "Zainab",
    "Zebeebah",
    "Zabibah",
    "Zubaydah",
    "Zubaida",
    "Zubaidah",
    "Zulaikha"
  ],

  //Taken from http://heraldry.sca.org/names/mongolian_names_marta.html
  "mongolianName": [
    "Abaka",
    "Abaqa",
    "Achigh Shirun",
    "Adarkidai",
    "Adkiragh",
    "Adya",
    "Agasiletai ",
    "Agsaldai ",
    "Aguchu",
    "Agujam ",
    "Achujim",
    "Achujam Bugural",
    "Ajai",
    "Ajinai",
    "Ajir ",
    "Ajirai",
    "Akhutai",
    "Alagh",
    "Alagh Yid",
    "Alchidai ",
    "Alchi",
    "Elchi",
    "Alchigh",
    "Aljai Temur ",
    "Alghu",
    "Altan",
    "Altun Ashugh",
    "Amal",
    "Amasandji",
    "Amasar",
    "Ambaghai",
    "Anarba",
    "Aragibal",
    "Arasen",
    "Argasar",
    "Arabuccha",
    "Argat",
    "Argun",
    "Arin Tasai",
    "Arik",
    "Arik Boge",
    "Ariq Boke",
    "Arik Buka",
    "Ariunbold",
    "Arsi",
    "Aruktai",
    "Argasun Qorchi",
    "Arkhai Khasar",
    "Arslan",
    "Aruch",
    "Asha Gambu",
    "Ashigh Temur",
    "Asugbal",
    "Badai",
    "Bagaridai",
    "Bai Shingor",
    "Baidar",
    "Baidu",
    "Baiju",
    "Bala",
    "Balagachi",
    "Baltu",
    "Bardam",
    "Bartan",
    "Bartu",
    "Barulatai",
    "Baasan",
    "Baavgai",
    "Batachikhan",
    "Bati",
    "Batu",
    "Bayan",
    "Bayan Cagan Tengri",
    "Bayan Olgei",
    "Bayar",
    "Bede",
    "Bedes",
    "Begter",
    "Begugtei",
    "Belgeltei",
    "Belgunutei",
    "Berke",
    "Besutei",
    "Biger",
    "Bilge",
    "Bilig",
    "Boal",
    "Bodonchar",
    "Bogarji",
    "Boge",
    "Esen Boge",
    "Arik Boge",
    "Bogen",
    "Boshigt",
    "Bogorchu",
    "Bolkhadar",
    "Bor",
    "Bora",
    "Borjigidai",
    "Boroghul",
    "Borachu",
    "Boroldai",
    "Boroldai Suyalbi",
    "Bortachikhan",
    "Borte Chinua",
    "Bortei",
    "Bucharan",
    "Bughu Khatagi",
    "Bughutu Salji",
    "Bugidai",
    "Bugunutei",
    "Bugurul",
    "Bujeg",
    "Bujir",
    "Bukha",
    "Arik Buka",
    "Ked-Buqa",
    "Qoribucha",
    "Bukidai",
    "Bulaqadar",
    "Bultechu",
    "Bultger",
    "Bulugan",
    "Buqatai",
    "Buri",
    "Buri Bulchiru",
    "Burim",
    "Burkhan Khaldun",
    "Butu",
    "Buyant",
    "Buyantu",
    "Buyirugh",
    "Carbon",
    "Cyriacus Buyirugh",
    "Chanai",
    "Chanar",
    "Chagadai",
    "Chaghagan",
    "Cagan Ebugen",
    "Chaghagan Khoga",
    "Chaghagan Uua",
    "Chagurkhai",
    "Chakhurkhan",
    "Chapar",
    "Charakha",
    "Chidukhul",
    "Chigu",
    "Chilagun",
    "Chiledu",
    "Chilger",
    "Chiluku",
    "Chimbai",
    "Chimbai Dargan",
    "Chingay",
    "Chingkim",
    "Choban",
    "Chormakhan",
    "Chulgetei",
    "Chuacenur",
    "Dagun",
    "Daidukul",
    "Dalantai",
    "Darbai",
    "Daritai",
    "Dash",
    "Dayan",
    "Dayir",
    "Dayir Usun",
    "Degei",
    "Dei",
    "Delbeg",
    "Delger",
    "Devet Berdi",
    "Dhunan",
    "Dinget",
    "Dobun",
    "Dodai",
    "Dogar",
    "Dogshin",
    "Dokholkhu",
    "Dologadai",
    "Donoi",
    "Dorbei",
    "Dori Bukha",
    "Durulji Tayiji",
    "Duua",
    "Edigu",
    "Eguden Yeke",
    "Elbek",
    "Eldegai",
    "Eljigidei",
    "Emlig",
    "Enx",
    "Erdeni",
    "Erke",
    "Erke Khara",
    "Erketu",
    "Esen Boge",
    "Esen Taij",
    "Esen Taysh",
    "Esugen",
    "Gal",
    "Galdan",
    "Caikhatu",
    "Gerel",
    "Geser",
    "Geser Khan",
    "Geugi",
    "Ghazan",
    "Ghunan",
    "Guchlug ",
    "Guchu",
    "Guchugur",
    "Gughlug",
    "Gugun",
    "Guntomor",
    "Gur",
    "Guyug",
    "Harghasun",
    "Hobogetur",
    "Hooshal",
    "Horkhudagh",
    "Hulegu",
    "Huslen",
    "Huslen Hutagt",
    "Husun",
    "Hychyt",
    "Idughadai",
    "Ile",
    "Ilugei",
    "Inalchi",
    "Inancha Bilge",
    "Iturgen",
    "Jakha Gambu",
    "Jaghatai",
    "Jajiradai",
    "Jali Bukha",
    "Jamugha",
    "Janggi",
    "Jarchigudai",
    "Jebe",
    "Jebein Noyan",
    "Jeder",
    "Jelme",
    "Jenkshi",
    "Jirandai",
    "Jirghadai",
    "Jirghogadai",
    "Jebke",
    "Jegu",
    "Jelme",
    "Jetei",
    "Jochi",
    "Jochi Khasar",
    "Jubkhan",
    "Jungdu",
    "Jungsai",
    "Jungso",
    "Jungshoi",
    "Jurchedei",
    "Kamala",
    "Kara",
    "Kara Hekegu",
    "Kepek",
    "Ketboge",
    "Kete",
    "Keuken",
    "Khabichi",
    "Khabul",
    "Khachi",
    "Khada",
    "Khadagan",
    "Khadagan Daldurkhan",
    "Khadagan Tasai",
    "Khadagh",
    "Khadan",
    "Khagatai Darmala ",
    "Khaguran",
    "Khaidai",
    "Khaidu",
    "Khaishan",
    "Khaji Kulug ",
    "Khajigin",
    "Khal",
    "Khali Kharchu",
    "Khaligudar",
    "Khalja",
    "Khara Gulug",
    "Qara Budang",
    "Kharachar",
    "Kharchu",
    "Khasar",
    "Khashi ",
    "Khashin",
    "Khongkhai",
    "Khongtaghar",
    "Khorichar",
    "Qoricar Mergan",
    "Khorchi",
    "Khorghosun",
    "Khori Shilemun Taisi",
    "Khori Subechi",
    "Khoridai",
    "Khorilartai",
    "Khongkhortai",
    "Khubilai",
    "Khuchar",
    "Khudu",
    "Khudus",
    "Khudus Khalkhan",
    "Khudukha",
    "Khulan",
    "Khurchakhus",
    "Khuril Ashigh",
    "Khutughtu",
    "Khutula",
    "Khuyildar",
    "Kinggiyadai Bukha",
    "Kiratai",
    "Kiriltugh",
    "Kishiligh",
    "Kogsegu Sabragh",
    "Kekchu",
    "Koko",
    "Koko Chos",
    "Koko Mongke",
    "Kokochu",
    "Kokochu Kirsagan",
    "Kokochu Teb Tenggeri",
    "Kopek",
    "Kotyan",
    "Kuchar",
    "Kundek",
    "Kus Bulad",
    "Kutlugh",
    "Temur Kutlugh",
    "Kuyuk ",
    "Kuzhuk",
    "Labakha ",
    "Ligdan",
    "Luvsan",
    "Magnai",
    "Mahamu",
    "Maqa Tudan",
    "Maqali",
    "Maral",
    "Masgud",
    "Mauci",
    "Megujin",
    "Menggei",
    "Menggetu",
    "Menggulig",
    "Megetu",
    "Molon",
    "Mengu",
    "Mergen",
    "Mongke",
    "Mongke Temur",
    "Monke Temur",
    "Tode Mongke",
    "Tuda Mongke",
    "Yesu Mongke",
    "Monx",
    "Morokha",
    "Mungke",
    "Muge",
    "Mukhali",
    "Mulkhalkhu",
    "Munglig",
    "Mungetu",
    "Munggugur",
    "Munokhoi",
    "Mutugen",
    "Myagmar",
    "Nachin",
    "Nakhu",
    "Narin",
    "Narin Kegen",
    "Narin Togoril",
    "Nayaga",
    "Nayan",
    "Nayantai",
    "Jebei Noyan",
    "Nekun",
    "Nekun Taisi",
    "Nogai",
    "Nongrot",
    "Odchigin",
    "Odchigin Abaga",
    "Temuge Otchigin",
    "Ogele",
    "Ogodei",
    "Okhotur",
    "Okin",
    "Okin Barkhagh",
    "Olai Anda",
    "Olar",
    "Oldaghar",
    "Ozbeg",
    "Olzii",
    "Olziytomor",
    "Oljeitu",
    "Ong",
    "Onggiran",
    "Onggur",
    "Orda",
    "Ordu Coronartai",
    "Osol",
    "Oyuun",
    "Ozbeg",
    "Qobolta",
    "Qoribuqa",
    "Qorisubechi",
    "Qoriqacha",
    "Sacha",
    "Sagra",
    "Sain",
    "Sanchir",
    "Sartak",
    "Sechegur",
    "Seger Sandalitu",
    "Semsochi",
    "Senggum",
    "Sidurgu",
    "Shager",
    "Shigi Khutukhu ",
    "Shiban",
    "Shigi-Qutuqu",
    "Shikigur",
    "Shilugei",
    "Shinghkhor",
    "Shiraghul",
    "Shiramun",
    "Shirgugetu",
    "Sibaguchu",
    "Siban",
    "Sinkur",
    "Sokhor",
    "Sorkhan Shira",
    "Sorkhatu Jurki",
    "Soyiketu",
    "Subetei",
    "Sugar",
    "Suke",
    "Sukhebaatar",
    "Sukegei",
    "Suyiketu",
    "Tabudai",
    "Tabur",
    "Tagadhur",
    "Taghai",
    "Tahar",
    "Taichar",
    "Taichu",
    "Tamachi",
    "Tamachag",
    "Taragai",
    "Tarmashirin",
    "Tartu",
    "Tatar",
    "Tatatunga",
    "Tayang",
    "Teb Tengri",
    "Tekuder",
    "Teguder Ahmad",
    "Teleboge",
    "Telegetu",
    "Temuge",
    "Temuge Otichigin",
    "Temujin",
    "Temujin Uge",
    "Temur",
    "Aljai Temur",
    "Ashigh Temur",
    "Durra Timur",
    "Timur Molie",
    "Tokur Temur",
    "Togha Timur",
    "Temur Kutlugh",
    "Temur Oljeitu",
    "Toghon Temur",
    "Bash Timur",
    "Mongke Temur",
    "Thaube",
    "Tobsakha",
    "Tobukha",
    "Todogen Girte",
    "Togh",
    "Togh Temur",
    "Toq Temur",
    "Togos Temur",
    "Toghon",
    "Toghon Temur",
    "Toghoril",
    "Toghtoga",
    "Togtoobuh",
    "Tokhuchar",
    "Tokhta",
    "Tokhtamysh",
    "Tole-Buqa",
    "Tolon",
    "Tolui",
    "Tolun",
    "Tomor Olziyt",
    "Torbi Tashi",
    "Tordung",
    "Torgan Sira",
    "Torgaljin",
    "Torgan",
    "Tseren",
    "Tsolmon",
    "Tuda Mongke",
    "Tudan",
    "Tugan",
    "Tuge",
    "Tumbinai",
    "Tumun",
    "Tungge",
    "Tungkhuidai",
    "Tutei",
    "Tuva",
    "Yesun Tuva",
    "Tuyuideger",
    "Uchikin",
    "Udutai",
    "Uighurtai",
    "Ukhuna",
    "Ukilen",
    "Ulagchi",
    "Uran Cenggui",
    "Urchger",
    "Urgamal",
    "Urus",
    "Uriangkadai",
    "Usun",
    "Xangai",
    "Xartsaga",
    "Xorxoi",
    "Yabuqa",
    "Yalavech",
    "Yargai",
    "Yasavur",
    "Yedi Tublugh",
    "Yegu",
    "Yerentai",
    "Yesugei",
    "Yesunge",
    "Yeke",
    "Yeke Cheren",
    "Yeke Chiledu",
    "Yeke Couru",
    "Yeke Nidun",
    "Yeki Negurin",
    "Yesu Mongke",
    "Yesun",
    "Yesun Tege",
    "Yesun Temur",
    "Yesun Tuva",
    "Yokhunan",
    "Yurukhan",
    "Zayaat",
    "Zhims"
  ],


//Taken from https://www.s-gabriel.org/names/ursula/tamil/
  "indianMaleName": [
    "Nirupatonkavarman",
    "Virajakecaripanmar",
    "Parakesaipanmar",
    "Uttamacola",
    "Rajarajakesaripanmar",
    "Arattan Ikatutevan",
    "Accan Pattalkan"
  ],
//Taken from https://sites.google.com/site/vairavisca/Home/creations/indian-name-research
  "indianFemaleName":[
    "Ammāti Naṅkaic Cāni",
    "Aṟam Uṭaiyāḷ",
    "Ariya Piḷḷai",
    "Arumoḻi Naṅkaiyār",
    "Cāmuṇṭappai",
    "Cavariy",
    "Ciṇṇavaiyār",
    "Cōmāci Cāṇi",
    "Iḷaiya Maṇi Naṅkai",
    "Kaṉaka Vīrak Kurattiyār",
    "Kaṅkaṉaic Cāṉi",
    "Kaṇṇa Pirāṭṭiy",
    "Kōmaḷa Valli",
    "Kumaraṭi Naṅkai",
    "Maṅkaiyarkaraciyār",
    "Maṅkaiyarkaraici",
    "Maṅkaiyarkkaraciyār",
    "Maturāntakiyār",
    "Miṭṭāṇṭār Nācciyār",
    "Mūtta Naṅkaiyār",
    "Nācci",
    "Nantiri Naṅkai",
    "Nilammai",
    "Paṭṭiṉik Kuratti Aṭikaḷ",
    "Peṅki",
    "Peṇṇaraciyār",
    "Tavañ Ceytāḷ",
    "Tēmpāvai",
    "Tēvāṉṟāḷ",
    "Tēvi",
    "Tiruvampalam Piriyāta Piḷḷaiyāṉ",
    "Toṇṭaimā Nācciyār",
    "Toṇṭaimā Nācciyār",
    "Umaiyāḻvār",
    "Umaiyāḻvār",
    "Utaiyañceytāḷ",
    "Vaccavaiyār",
    "Vampu",
    "Vampu Paḻuttāḷ",
    "Vaṭavāyil Aṇṭai",
    "Veṇṇāyi Naṅkai"


  ],

//Taken from http://www.peiraeuspubliclibrary.com/names/medievalnames/medievalchina.html
  "chineseMaleName":[
    "Ao",
    "Bang",
    "Buwei",
    "Changdong",
    "Chao",
    "Chai",
    "Fuling",
    "Gao",
    "Guang",
    "Han",
    "He",
    "Hu Hai",
    "Jizi",
    "Ju",
    "Kang",
    "Long",
    "Lun",
    "Mang",
    "Qi",
    "Qian",
    "Qing",
    "She",
    "Sheng",
    "Shi",
    "Si",
    "Taizong",
    "Tian",
    "Wan",
    "Xian",
    "Xie",
    "Xin",
    "Xing",
    "Yang",
    "Yide",
    "Ying",
    "Yu",
    "Yuan",
    "Yun",
    "Zang",
    "Zhanghaui",
    "Zhao",
    "Zheng",
    "Zhou",
    "Ziying"
  ],

  "chineseFemaleName":[
    "Feiyan",
    "Hou",
    "Ji",
    "Jiangnu",
    "Lihau",
    "Na",
    "Shengtong",
    "Zhi"
  ],
  "byzantineFemaleName":[
    "Agatha",
    "Anastasia",
    "Anna",
    "Antonia",
    "Ariadne",
    "Athenais",
    "Constantina",
    "Epiphania",
    "Eudokia",
    "Eulogia",
    "Euphrosyne",
    "Helena",
    "Irene",
    "Joannina",
    "Maria",
    "Martina",
    "Sophia",
    "Thekla",
    "Theodora",
    "Theophano",
    "Yolanda",
    "Zoe"
  ],
  "byzantineMaleName":[
    "Alexander",
    "Alexios",
    "Anastasius",
    "Andronikos",
    "Antigonos",
    "Antonius",
    "Antony",
    "Arcadius",
    "Arethas",
    "Asylaion",
    "Basil",
    "Basiliscus",
    "Basiliskianos",
    "Belisarius",
    "Callinicus",
    "Christopher",
    "Constantine",
    "Constantius",
    "Damianus",
    "David",
    "Demetrios",
    "Diocletian",
    "Eutathios",
    "Euthymius",
    "George",
    "Heraclius",
    "Heraclonas",
    "Himerius",
    "Ignatios",
    "Isaac",
    "John",
    "Julian",
    "Justinian",
    "Leo",
    "Leontius",
    "Licinius",
    "Manuel",
    "Michael",
    "Mousoulios",
    "Nicholas",
    "Nikephoros",
    "Niketas",
    "Petronas",
    "Philippicus",
    "Philaretos",
    "Phocas",
    "Photios",
    "Romanus",
    "Stauracius",
    "Stylian",
    "Theodore",
    "Theodosios",
    "Theoktistos",
    "Theophilus",
    "Valens"
  ],
//From sources from https://s-gabriel.org/names/islamic.shtml

  "persianFemaleName": [
    "Bakht",
    "Bakht Dawlat",
    "Bakht Nigâr",
    "Dawlat",
    "Dawlat Bakht",
    "Dil",
    "Dil Dâr",
    "Dil Khûsh",
    "Dil Shâd",
    "Durr",
    "Fâkhire",
    "Firuz Bakht",
    "Firuze",
    "Gawhar",
    "Gawhar Shâd",
    "Gul",
    "Gul Badan",
    "Gul Bîkî",
    "Gul Nâr",
    "Gul Rang",
    "Gul Rukh",
    "Gul Shâd",
    "Husn Nigâr",
    "Jân",
    "La'l",
    "Mihr Bânû",
    "Mihr Khush",
    "Mihr Nigâr",
    "Nâr Gul",
    "Nigâr",
    "Nurûz",
    "Pîrûz",
    "Shâd Bakht",
    "Shâd Bânû",
    "Shahr Bânû",
    "Shîrîn"
  ],
  "persianMaleName": [
      "`Abd al-Khâliq",
      "`Abdullâh",
      "Abû Nasr",
      "`Alî",
      "`Ârif",
      "Hasan",
      "Khalîl",
      "Kulâl",
      "Mahmûd",
      "Muhammad",
      "Qutham",
      "`Ubaydullâh",
      "Ya`qûb",
      "Yûsuf"
    ],
  //List of family names below

  "chineseFamilyName":[
    "Ban",
    "Chang",
    "Chen",
    "Chu",
    "Dong",
    "Dou",
    "Fa",
    "Gou",
    "Huo",
    "Jian",
    "Li",
    "Liang",
    "Liu",
    "Lu",
    "Ma",
    "Meng",
    "Shang",
    "Xuan",
    "Wang",
    "Wei",
    "Wu",
    "Xiang",
    "Yin",
    "Zhao",
    "Zhuang",
    "Zuan"
  ],
  
  "persianFamilyName":[
    "Ahrâr",
    "Anjîr Faghnawî",
    "Attar",
    "Charkhî",
    "Ghujdawânî",
    "Hamadânî",
    "Isfahânî",
    "Kâshgharî",
    "Khâmûsh",
    "Naqshband",
    "Pârsâ",
    "Rîwgirawî",
    "Samâsiyî"
  ],
  "byzantineFamilyName":[
    "Bringas",
    "Choniates",
    "Comnenus",
    "Cydones",
    "Dalassema",
    "Ducas",
    "Lascaris",
    "Maleinos",
    "Maniaces",
    "Phokas",
    "Prodromus",
    "Psellos",
    "Scylitzes",
    "Tzimiskes",
    "Xiphilinos"
  ],

  "indianFamilyName":[
    ""
  ]
}

let relations = makeRelations(N)